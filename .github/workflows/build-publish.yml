name: Build and publish Docker image with version
on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]
    tags: ['v*.*.*']
  workflow_dispatch:

jobs:
  build_and_publish_docker:
    name: Push Docker image to docker hub and github packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
      - name: Prepare
        id: prepare
        run: |
          function test_version() {
            curl -s -S "https://registry.hub.docker.com/v2/repositories/openrouteservice/openrouteservice/tags/?page_size=1024" |
              sed -e 's/,/,\n/g' -e 's/\[/\[\n/g' |
              grep '"name"' |
              awk -F\" '{print $4;}' |
              sort -fu
          }

          DOCKER_IMAGE=openrouteservice/openrouteservice
          CURRENT_VERSIONS=$(test_version)
          echo "Current Docker versions $CURRENT_VERSIONS"
          IMAGE_VERSION=${{ steps.previoustag.outputs.tag }}
          DOCKER_PLATFORMS=linux/amd64

          TAGS_VERSION="--tag ${DOCKER_IMAGE}:${IMAGE_VERSION}"
          TAGS_LATEST="--tag ${DOCKER_IMAGE}:latest"
          TAGS_NIGHTLY="--tag ${DOCKER_IMAGE}:nightly"

          if [[ $CURRENT_VERSIONS =~ $IMAGE_VERSION ]]; then
            echo "Image version: $IMAGE_VERSION present or latest. Skipping it!"
            BUILD_VERSION=false
          else
            echo "Image version $IMAGE_VERSION not present and not latest. Building it!"
            BUILD_VERSION=true
          fi

          echo ::set-output name=build_version::${BUILD_VERSION}
          echo ::set-output name=buildx_args_version::--platform ${DOCKER_PLATFORMS} \
                      ${TAGS_VERSION} .
          echo ::set-output name=buildx_args_latest::--platform ${DOCKER_PLATFORMS} \
                      ${TAGS_LATEST} .
          echo ::set-output name=buildx_args_nightly::--platform ${DOCKER_PLATFORMS} \
                      ${TAGS_NIGHTLY} .
      - name: Build version if not present
        if: ${{ steps.prepare.outputs.build_version == 'true' }}
        run: |
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args_version }}
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args_latest }}
      - name: Build nightly
        run: |
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args_nightly }}
      - name: Login to DockerHub
        if: ${{ success() && github.ref == 'refs/heads/master' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Publish version and latest if not present
        if: ${{ github.ref == 'refs/heads/master' && steps.prepare.outputs.build_version == 'true' }}
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args_version }}
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args_latest }}
      - name: Publish nightly
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args_nightly }}
